{"version":3,"sources":["../../src/preset.ts"],"names":[],"mappings":"AACA,YAAY,eAAe;AAC3B,YAAY,+BAA+B;AAC3C,SAAQ,sBAAqB;AAC7B,SAAQ,UAAU,iBAAgB;AAI3B,MAAM,uBAAuB;AAE7B,MAAM,yBAAyB;AAAA;AAAA;AAAA;AAAA;AAM/B,MAAM,SAA2C;AAAA,EACtD,uBAAuB,CAAC,YAAY;AAClC,QAAI,CAAC,QAAQ,cAAc,SAAS,OAAO,GAAG;AAC5C,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QACE,QAAQ,SAAS,SAAS,KAC1B,OAAO,KAAK,QAAQ,OAAO,EAAE,KAAK,CAAC,MAAM,EAAE,WAAW,YAAY,CAAC,GACnE;AACA,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,UAAM,wBAAwB,eAAe,QAAQ,SAAS;AAC9D,UAAM,UAAU,sBAAsB,IAAI,CAAC,EAAC,OAAM,MAAM,MAAM;AAE9D,UAAM,YAAY;AAAA,MAChB,GAAG,QAAQ;AAAA,MACX,CAAC,QAAQ;AAAA,MACT,CAAC,0BAA0B;AAAA,MAC3B,CAAC,YAAY,EAAC,QAAQ,UAAS;AAAA,IACjC;AAEA,UAAM,UAAyC;AAAA,MAE7C;AAAA,QACE,CAAC,QAAQ;AAAA,UACP,SAAS;AAAA;AAAA;AAAA,QACX;AAAA,MACF;AAAA,MAEA;AAAA,QACE,CAAC,QAAQ;AAAA,UACP,SAAS,eAAe;AAAA;AAAA,QAC1B;AAAA,MACF;AAAA,MAEA;AAAA,QACE,CAAC,0BAA0B;AAAA,UACzB,cAAc;AAAA,UACd,gBAAgB;AAAA,UAChB,iBAAiB;AAAA,QACnB;AAAA,MACF;AAAA,MAEA,EAAC,CAAC,YAAY,EAAC,uBAAuB,uBAAsB,EAAC;AAAA,MAE7D,GAAG,QAAQ;AAAA,IACb;AAEA,WAAO;AAAA,MACL;AAAA,QACE,UAAU,QAAQ;AAAA,QAClB;AAAA,QACA;AAAA,QACA,QAAQ,QAAQ;AAAA,QAChB,QAAQ;AAAA,UACN,GAAG,QAAQ;AAAA,UAEX;AAAA,QACF;AAAA,QACA,WAAW;AAAA,QACX,oBAAoB,QAAQ;AAAA,MAC9B;AAAA,IACF;AAAA,EACF;AACF","sourcesContent":["import type {Types} from '@graphql-codegen/plugin-helpers';\nimport * as addPlugin from '@graphql-codegen/add';\nimport * as typescriptOperationPlugin from '@graphql-codegen/typescript-operations';\nimport {processSources} from './sources.js';\nimport {plugin as dtsPlugin} from './plugin.js';\n\nexport type GqlTagConfig = {};\n\nexport const namespacedImportName = 'StorefrontAPI';\n\nexport const interfaceExtensionCode = `\ndeclare module '@shopify/hydrogen' {\n  interface StorefrontQueries extends GeneratedQueryTypes {}\n  interface StorefrontMutations extends GeneratedMutationTypes {}\n}`;\n\nexport const preset: Types.OutputPreset<GqlTagConfig> = {\n  buildGeneratesSection: (options) => {\n    if (!options.baseOutputDir.endsWith('.d.ts')) {\n      throw new Error('[hydrogen-preset] target output should be a .d.ts file');\n    }\n\n    if (\n      options.plugins?.length > 0 &&\n      Object.keys(options.plugins).some((p) => p.startsWith('typescript'))\n    ) {\n      throw new Error(\n        '[hydrogen-preset] providing additional typescript-based `plugins` leads to duplicated generated types',\n      );\n    }\n\n    const sourcesWithOperations = processSources(options.documents);\n    const sources = sourcesWithOperations.map(({source}) => source);\n\n    const pluginMap = {\n      ...options.pluginMap,\n      [`add`]: addPlugin,\n      [`typescript-operations`]: typescriptOperationPlugin,\n      [`gen-dts`]: {plugin: dtsPlugin},\n    };\n\n    const plugins: Array<Types.ConfiguredPlugin> = [\n      // 1. Disable eslint for the generated file\n      {\n        [`add`]: {\n          content: `/* eslint-disable eslint-comments/disable-enable-pair */\\n/* eslint-disable eslint-comments/no-unlimited-disable */\\n/* eslint-disable */`,\n        },\n      },\n      // 2. Import all the generated API types from Hydrogen\n      {\n        [`add`]: {\n          content: `import * as ${namespacedImportName} from '@shopify/hydrogen/storefront-api-types';\\n`,\n        },\n      },\n      // 3. Generate the operations (i.e. queries, mutations, and fragments types)\n      {\n        [`typescript-operations`]: {\n          skipTypename: true, // Skip __typename fields\n          useTypeImports: true, // Use `import type` instead of `import`\n          preResolveTypes: false, // Use Pick<...> instead of primitives\n        },\n      },\n      // 4.  Augment Hydrogen query/mutation interfaces with the generated operations\n      {[`gen-dts`]: {sourcesWithOperations, interfaceExtensionCode}},\n      // 5. Custom plugins from the user\n      ...options.plugins,\n    ];\n\n    return [\n      {\n        filename: options.baseOutputDir,\n        plugins,\n        pluginMap,\n        schema: options.schema,\n        config: {\n          ...options.config,\n          // This is for the operations plugin\n          namespacedImportName,\n        },\n        documents: sources,\n        documentTransforms: options.documentTransforms,\n      },\n    ];\n  },\n};\n"]}