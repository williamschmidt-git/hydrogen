import { describe, beforeEach, vi, afterEach, expect, it } from 'vitest';
import { runCreateShortcut } from './shortcut.js';
import { mockAndCaptureOutput } from '@shopify/cli-kit/node/testing/output';
import { supportsShell, isWindows, isGitBash } from '../../lib/shell.js';
import { execSync, exec } from 'child_process';

describe("shortcut", () => {
  const outputMock = mockAndCaptureOutput();
  beforeEach(() => {
    vi.resetAllMocks();
    vi.mock("child_process");
    vi.mock("../../lib/shell.js", async () => {
      return {
        isWindows: vi.fn(),
        isGitBash: vi.fn(),
        supportsShell: vi.fn(),
        shellWriteFile: () => true,
        shellRunScript: () => true,
        hasAlias: () => false,
        homeFileExists: () => Promise.resolve(true)
      };
    });
    vi.mocked(supportsShell).mockImplementation(
      (shell) => !isWindows() || shell === "bash"
    );
  });
  afterEach(() => {
    outputMock.clear();
    expect(execSync).toHaveBeenCalledTimes(0);
    expect(exec).toHaveBeenCalledTimes(0);
  });
  it("creates aliases for Unix", async () => {
    vi.mocked(isWindows).mockReturnValue(false);
    await runCreateShortcut();
    expect(outputMock.info()).toMatch(`zsh, bash, fish`);
    expect(outputMock.error()).toBeFalsy();
  });
  it("creates aliases for Windows", async () => {
    vi.mocked(isWindows).mockReturnValue(true);
    await runCreateShortcut();
    expect(outputMock.info()).toMatch(`PowerShell, PowerShell 7+`);
    expect(outputMock.error()).toBeFalsy();
  });
  it("creates aliases for Windows in Git Bash", async () => {
    vi.mocked(isWindows).mockReturnValue(true);
    vi.mocked(isGitBash).mockReturnValueOnce(true);
    await runCreateShortcut();
    expect(outputMock.info()).toMatch("bash");
    expect(outputMock.error()).toBeFalsy();
  });
  it("warns when not finding shells", async () => {
    vi.mocked(isWindows).mockReturnValue(false);
    vi.mocked(supportsShell).mockReturnValue(false);
    await runCreateShortcut();
    expect(outputMock.info()).toBeFalsy();
    expect(outputMock.error()).toBeTruthy();
  });
});
