import { vi, describe, beforeEach, afterEach, it, expect } from 'vitest';
import { mockAndCaptureOutput } from '@shopify/cli-kit/node/testing/output';
import { inTemporaryDirectory } from '@shopify/cli-kit/node/fs';
import { renderConfirmationPrompt } from '@shopify/cli-kit/node/ui';
import { ListEnvironmentsQuery } from '../../../lib/graphql/admin/list-environments.js';
import { getAdminSession } from '../../../lib/admin-session.js';
import { adminRequest } from '../../../lib/graphql.js';
import { getConfig } from '../../../lib/shopify-config.js';
import { renderMissingLink, renderMissingStorefront } from '../../../lib/render-errors.js';
import { linkStorefront } from '../link.js';
import { listEnvironments } from './list.js';

vi.mock("@shopify/cli-kit/node/ui", async () => {
  const original = await vi.importActual("@shopify/cli-kit/node/ui");
  return {
    ...original,
    renderConfirmationPrompt: vi.fn()
  };
});
vi.mock("../link.js");
vi.mock("../../../lib/admin-session.js");
vi.mock("../../../lib/shopify-config.js");
vi.mock("../../../lib/render-errors.js");
vi.mock("../../../lib/graphql.js", async () => {
  const original = await vi.importActual("../../../lib/graphql.js");
  return {
    ...original,
    adminRequest: vi.fn()
  };
});
vi.mock("../../../lib/shop.js", () => ({
  getHydrogenShop: () => "my-shop"
}));
describe("listEnvironments", () => {
  const ADMIN_SESSION = {
    token: "abc123",
    storeFqdn: "my-shop"
  };
  const PRODUCTION_ENVIRONMENT = {
    id: "gid://shopify/HydrogenStorefrontEnvironment/1",
    branch: "main",
    type: "PRODUCTION",
    name: "Production",
    createdAt: "2023-02-16T22:35:42Z",
    url: "https://oxygen-123.example.com"
  };
  const CUSTOM_ENVIRONMENT = {
    id: "gid://shopify/HydrogenStorefrontEnvironment/3",
    branch: "staging",
    type: "CUSTOM",
    name: "Staging",
    createdAt: "2023-05-08T20:52:29Z",
    url: "https://oxygen-456.example.com"
  };
  const PREVIEW_ENVIRONMENT = {
    id: "gid://shopify/HydrogenStorefrontEnvironment/2",
    branch: null,
    type: "PREVIEW",
    name: "Preview",
    createdAt: "2023-02-16T22:35:42Z",
    url: null
  };
  beforeEach(async () => {
    vi.mocked(getAdminSession).mockResolvedValue(ADMIN_SESSION);
    vi.mocked(getConfig).mockResolvedValue({
      storefront: {
        id: "gid://shopify/HydrogenStorefront/1",
        title: "Existing Link"
      }
    });
    vi.mocked(adminRequest).mockResolvedValue({
      hydrogenStorefront: {
        id: "gid://shopify/HydrogenStorefront/1",
        productionUrl: "https://example.com",
        environments: [
          PRODUCTION_ENVIRONMENT,
          CUSTOM_ENVIRONMENT,
          PREVIEW_ENVIRONMENT
        ]
      }
    });
  });
  afterEach(() => {
    vi.resetAllMocks();
    mockAndCaptureOutput().clear();
  });
  it("makes a GraphQL call to fetch environment variables", async () => {
    await inTemporaryDirectory(async (tmpDir) => {
      await listEnvironments({ path: tmpDir });
      expect(adminRequest).toHaveBeenCalledWith(
        ListEnvironmentsQuery,
        ADMIN_SESSION,
        {
          id: "gid://shopify/HydrogenStorefront/1"
        }
      );
    });
  });
  it("lists the environments", async () => {
    await inTemporaryDirectory(async (tmpDir) => {
      const output = mockAndCaptureOutput();
      await listEnvironments({ path: tmpDir });
      expect(output.info()).toMatch(
        /Production\s*main\s*https:\/\/example\.com/
      );
      expect(output.info()).toMatch(
        /Staging\s*staging\s*https:\/\/oxygen-456\.example\.com/
      );
      expect(output.info()).toMatch(/Preview\s*-\s*-/);
    });
  });
  describe("when there is no linked storefront", () => {
    beforeEach(() => {
      vi.mocked(getConfig).mockResolvedValue({
        storefront: void 0
      });
    });
    it("calls renderMissingLink", async () => {
      await inTemporaryDirectory(async (tmpDir) => {
        await listEnvironments({ path: tmpDir });
        expect(renderMissingLink).toHaveBeenCalledOnce();
      });
    });
    it("prompts the user to create a link", async () => {
      vi.mocked(renderConfirmationPrompt).mockResolvedValue(true);
      await inTemporaryDirectory(async (tmpDir) => {
        await listEnvironments({ path: tmpDir });
        expect(renderConfirmationPrompt).toHaveBeenCalledWith({
          message: expect.stringMatching(/Run .*npx shopify hydrogen link.*\?/)
        });
        expect(linkStorefront).toHaveBeenCalledWith({
          path: tmpDir,
          silent: true
        });
      });
    });
  });
  describe("when there is no matching storefront in the shop", () => {
    beforeEach(() => {
      vi.mocked(adminRequest).mockResolvedValue({
        hydrogenStorefront: null
      });
    });
    it("calls renderMissingStorefront", async () => {
      await inTemporaryDirectory(async (tmpDir) => {
        await listEnvironments({ path: tmpDir });
        expect(renderMissingStorefront).toHaveBeenCalledOnce();
      });
    });
  });
});
