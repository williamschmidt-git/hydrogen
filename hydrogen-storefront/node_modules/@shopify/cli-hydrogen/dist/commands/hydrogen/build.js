import path from 'path';
import { outputInfo, outputContent, outputToken, outputWarn } from '@shopify/cli-kit/node/output';
import { rmdir, fileSize, copyFile } from '@shopify/cli-kit/node/fs';
import { getProjectPaths, getRemixConfig } from '../../lib/config.js';
import { commonFlags, deprecated, flagsToCamelObject } from '../../lib/flags.js';
import Command from '@shopify/cli-kit/node/base-command';
import { Flags } from '@oclif/core';
import { checkLockfileStatus } from '../../lib/check-lockfile.js';
import { findMissingRoutes } from '../../lib/missing-routes.js';
import { getPackageManager } from '@shopify/cli-kit/node/node-package-manager';
import { colors } from '../../lib/colors.js';

const LOG_WORKER_BUILT = "\u{1F4E6} Worker built";
class Build extends Command {
  static description = "Builds a Hydrogen storefront for production.";
  static flags = {
    path: commonFlags.path,
    sourcemap: Flags.boolean({
      description: "Generate sourcemaps for the build.",
      env: "SHOPIFY_HYDROGEN_FLAG_SOURCEMAP",
      default: true
    }),
    ["disable-route-warning"]: Flags.boolean({
      description: "Disable warning about missing standard routes.",
      env: "SHOPIFY_HYDROGEN_FLAG_DISABLE_ROUTE_WARNING"
    }),
    base: deprecated("--base")(),
    entry: deprecated("--entry")(),
    target: deprecated("--target")()
  };
  async run() {
    const { flags } = await this.parse(Build);
    const directory = flags.path ? path.resolve(flags.path) : process.cwd();
    await runBuild({ ...flagsToCamelObject(flags), path: directory });
  }
}
async function runBuild({
  path: appPath,
  sourcemap = true,
  disableRouteWarning = false
}) {
  if (!process.env.NODE_ENV) {
    process.env.NODE_ENV = "production";
  }
  const { root, buildPath, buildPathClient, buildPathWorkerFile, publicPath } = getProjectPaths(appPath);
  await checkLockfileStatus(root);
  console.time(LOG_WORKER_BUILT);
  const [remixConfig] = await Promise.all([
    getRemixConfig(root),
    rmdir(buildPath, { force: true })
  ]);
  outputInfo(`
\u{1F3D7}\uFE0F  Building in ${process.env.NODE_ENV} mode...`);
  const { build } = await import('@remix-run/dev/dist/compiler/build.js');
  const { logCompileFailure } = await import('@remix-run/dev/dist/compiler/onCompileFailure.js');
  await Promise.all([
    copyPublicFiles(publicPath, buildPathClient),
    build(remixConfig, {
      mode: process.env.NODE_ENV,
      sourcemap,
      onCompileFailure: (failure) => {
        logCompileFailure(failure);
        throw Error();
      }
    })
  ]);
  if (process.env.NODE_ENV !== "development") {
    console.timeEnd(LOG_WORKER_BUILT);
    const sizeMB = await fileSize(buildPathWorkerFile) / (1024 * 1024);
    outputInfo(
      outputContent`   ${colors.dim(
        path.relative(root, buildPathWorkerFile)
      )}  ${outputToken.yellow(sizeMB.toFixed(2))} MB\n`
    );
    if (sizeMB >= 1) {
      outputWarn(
        `\u{1F6A8} Worker bundle exceeds 1 MB! This can delay your worker response.${remixConfig.serverMinify ? "" : " Minify your bundle by adding `serverMinify: true` to remix.config.js."}
`
      );
    }
  }
  if (!disableRouteWarning) {
    const missingRoutes = findMissingRoutes(remixConfig);
    if (missingRoutes.length) {
      const packageManager = await getPackageManager(root);
      const exec = packageManager === "npm" ? "npx" : packageManager;
      outputWarn(
        `Heads up: Shopify stores have a number of standard routes that aren\u2019t set up yet.
Some functionality and backlinks might not work as expected until these are created or redirects are set up.
This build is missing ${missingRoutes.length} route${missingRoutes.length > 1 ? "s" : ""}. For more details, run \`${exec} shopify hydrogen check routes\`.
`
      );
    }
  }
  process.exit(0);
}
async function copyPublicFiles(publicPath, buildPathClient) {
  return copyFile(publicPath, buildPathClient);
}

export { copyPublicFiles, Build as default, runBuild };
