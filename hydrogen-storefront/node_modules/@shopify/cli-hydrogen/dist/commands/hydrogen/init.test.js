import { describe, beforeEach, vi, it, expect } from 'vitest';
import { temporaryDirectoryTask } from 'tempy';
import { runInit } from './init.js';
import { renderSelectPrompt, renderConfirmationPrompt, renderTextPrompt, renderInfo } from '@shopify/cli-kit/node/ui';
import { outputContent } from '@shopify/cli-kit/node/output';
import { installNodeModules } from '@shopify/cli-kit/node/node-package-manager';

describe("init", () => {
  beforeEach(() => {
    vi.resetAllMocks();
    vi.mock("@shopify/cli-kit/node/output");
    vi.mock("../../lib/transpile-ts.js");
    vi.mock("../../lib/template-downloader.js", async () => ({
      getLatestTemplates: () => Promise.resolve({})
    }));
    vi.mock("@shopify/cli-kit/node/node-package-manager");
    vi.mocked(outputContent).mockImplementation(() => ({
      value: ""
    }));
    vi.mock("@shopify/cli-kit/node/ui");
    vi.mock("@shopify/cli-kit/node/fs");
  });
  const defaultOptions = (stubs) => ({
    template: "hello-world",
    language: "js",
    path: "path/to/project",
    ...stubs
  });
  describe.each([
    {
      flag: "template",
      value: "hello-world",
      condition: { fn: renderSelectPrompt, match: /template/i }
    },
    {
      flag: "installDeps",
      value: true,
      condition: { fn: renderConfirmationPrompt, match: /install dependencies/i }
    },
    {
      flag: "language",
      value: "ts",
      condition: { fn: renderSelectPrompt, match: /language/i }
    },
    {
      flag: "path",
      value: "./my-app",
      condition: { fn: renderTextPrompt, match: /where/i }
    }
  ])("flag $flag", ({ flag, value, condition }) => {
    it(`does not prompt the user for ${flag} when a value is passed in options`, async () => {
      await temporaryDirectoryTask(async (tmpDir) => {
        const options = defaultOptions({
          path: tmpDir,
          [flag]: value
        });
        await runInit(options);
        expect(condition.fn).not.toHaveBeenCalledWith(
          expect.objectContaining({
            message: expect.stringMatching(condition.match)
          })
        );
      });
    });
    it(`prompts the user for ${flag} when no value is passed in options`, async () => {
      await temporaryDirectoryTask(async (tmpDir) => {
        const options = defaultOptions({
          path: tmpDir,
          [flag]: void 0
        });
        await runInit(options);
        expect(condition.fn).toHaveBeenCalledWith(
          expect.objectContaining({
            message: expect.stringMatching(condition.match)
          })
        );
      });
    });
  });
  it("installs dependencies when installDeps is true", async () => {
    await temporaryDirectoryTask(async (tmpDir) => {
      const options = defaultOptions({ installDeps: true, path: tmpDir });
      await runInit(options);
      expect(installNodeModules).toHaveBeenCalled();
    });
  });
  it("does not install dependencies when installDeps is false", async () => {
    await temporaryDirectoryTask(async (tmpDir) => {
      const options = defaultOptions({ installDeps: false, path: tmpDir });
      await runInit(options);
      expect(installNodeModules).not.toHaveBeenCalled();
    });
  });
  it("displays inventory information when using the demo-store template", async () => {
    await temporaryDirectoryTask(async (tmpDir) => {
      const options = defaultOptions({
        installDeps: false,
        path: tmpDir,
        template: "demo-store"
      });
      await runInit(options);
      expect(renderInfo).toHaveBeenCalledTimes(1);
      expect(renderInfo).toHaveBeenCalledWith(
        expect.objectContaining({
          body: expect.stringContaining(
            "To connect this project to your Shopify store\u2019s inventory"
          ),
          headline: expect.stringContaining(
            "Your project will display inventory from the Hydrogen Demo Store"
          )
        })
      );
    });
  });
  it("does not display inventory information when using non-demo-store templates", async () => {
    await temporaryDirectoryTask(async (tmpDir) => {
      const options = defaultOptions({
        installDeps: false,
        path: tmpDir,
        template: "pizza-store"
      });
      await runInit(options);
      expect(renderInfo).toHaveBeenCalledTimes(0);
    });
  });
});
