import { Flags } from '@oclif/core';
import { camelize } from '@shopify/cli-kit/common/string';
import { renderInfo } from '@shopify/cli-kit/node/ui';
import { normalizeStoreFqdn } from '@shopify/cli-kit/node/context/fqdn';
import { colors } from './colors.js';

const commonFlags = {
  path: Flags.string({
    description: "The path to the directory of the Hydrogen storefront. The default is the current directory.",
    env: "SHOPIFY_HYDROGEN_FLAG_PATH"
  }),
  port: Flags.integer({
    description: "Port to run the server on.",
    env: "SHOPIFY_HYDROGEN_FLAG_PORT",
    default: 3e3
  }),
  force: Flags.boolean({
    description: "Overwrite the destination directory and files if they already exist.",
    env: "SHOPIFY_HYDROGEN_FLAG_FORCE",
    char: "f"
  }),
  shop: Flags.string({
    char: "s",
    description: "Shop URL. It can be the shop prefix (janes-apparel) or the full myshopify.com URL (janes-apparel.myshopify.com, https://janes-apparel.myshopify.com).",
    env: "SHOPIFY_SHOP",
    parse: async (input) => normalizeStoreFqdn(input)
  }),
  ["env-branch"]: Flags.string({
    description: "Specify an environment's branch name when using remote environment variables.",
    env: "SHOPIFY_HYDROGEN_ENVIRONMENT_BRANCH",
    char: "e",
    hidden: true
  })
};
function flagsToCamelObject(obj) {
  return Object.entries(obj).reduce((acc, [key, value]) => {
    acc[camelize(key)] = value;
    return acc;
  }, {});
}
function parseProcessFlags(processArgv, flagMap = {}) {
  const [, , ...args] = processArgv;
  const options = {};
  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    const nextArg = args[i + 1];
    if (arg?.startsWith("-")) {
      let key = arg.replace(/^\-{1,2}/, "");
      let value = !nextArg || nextArg.startsWith("-") ? true : nextArg;
      if (value === true && key.startsWith("no-")) {
        value = false;
        key = key.replace("no-", "");
      }
      options[flagMap[key] || key] = value;
    }
  }
  return flagsToCamelObject(options);
}
function deprecated(name) {
  return Flags.custom({
    parse: () => {
      renderInfo({
        headline: `The ${colors.bold(
          name
        )} flag is deprecated and will be removed in a future version of Shopify CLI.`
      });
      return Promise.resolve(" ");
    },
    hidden: true
  });
}

export { commonFlags, deprecated, flagsToCamelObject, parseProcessFlags };
