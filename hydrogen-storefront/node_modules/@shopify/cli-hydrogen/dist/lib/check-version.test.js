import { checkHydrogenVersion } from './check-version.js';
import { vi, describe, afterEach, it, expect, beforeEach } from 'vitest';
import { mockAndCaptureOutput } from '@shopify/cli-kit/node/testing/output';
import { checkForNewVersion } from '@shopify/cli-kit/node/node-package-manager';

vi.mock("@shopify/cli-kit/node/node-package-manager", () => {
  return {
    checkForNewVersion: vi.fn()
  };
});
describe("checkHydrogenVersion()", () => {
  const outputMock = mockAndCaptureOutput();
  afterEach(() => {
    vi.restoreAllMocks();
    outputMock.clear();
  });
  describe("when a current version is available", () => {
    it("calls checkForNewVersion", async () => {
      await checkHydrogenVersion("dir");
      expect(checkForNewVersion).toHaveBeenCalledWith(
        "@shopify/hydrogen",
        expect.stringMatching(/20\d{2}\.\d{1,2}\.\d{1,3}/)
      );
    });
    describe("and it is up to date", () => {
      beforeEach(() => {
        vi.mocked(checkForNewVersion).mockResolvedValue(void 0);
      });
      it("returns undefined", async () => {
        expect(await checkHydrogenVersion("dir")).toBe(void 0);
      });
    });
    describe("and a new version is available", () => {
      beforeEach(() => {
        vi.mocked(checkForNewVersion).mockResolvedValue("2023.1.5");
      });
      it("returns a function", async () => {
        expect(await checkHydrogenVersion("dir")).toBeInstanceOf(Function);
      });
      it("outputs a message to the user with the new version", async () => {
        const showUpgrade = await checkHydrogenVersion("dir");
        const { currentVersion, newVersion } = showUpgrade();
        expect(outputMock.info()).toMatch(
          new RegExp(
            ` info .+ Upgrade available .+ Version ${newVersion.replaceAll(
              ".",
              "\\."
            )}.+ running v${currentVersion.replaceAll(".", "\\.")}`,
            "is"
          )
        );
      });
    });
  });
  describe("when no current version can be found", () => {
    it("returns undefined and does not call checkForNewVersion", async () => {
      expect(await checkHydrogenVersion("/fake-absolute-dir")).toBe(void 0);
      expect(checkForNewVersion).not.toHaveBeenCalled();
    });
  });
});
