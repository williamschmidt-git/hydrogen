import { loadCodegenConfig, generate } from '@graphql-codegen/cli';
import { patchGqlPluck, pluckConfig, preset, schema } from '@shopify/hydrogen-codegen';
export { patchGqlPluck } from '@shopify/hydrogen-codegen';
import { resolveFormatConfig, format } from './transpile-ts.js';
import { renderWarning, renderFatalError } from '@shopify/cli-kit/node/ui';
import { relativePath, joinPath } from '@shopify/cli-kit/node/path';
import { spawn } from 'node:child_process';
import { fileURLToPath } from 'node:url';

const nodePath = process.argv[1];
const modulePath = fileURLToPath(import.meta.url);
const isStandaloneProcess = nodePath === modulePath;
if (isStandaloneProcess) {
  patchGqlPluck().then(
    () => generateTypes({
      rootDirectory: process.argv[2],
      appDirectory: process.argv[3],
      configFilePath: process.argv[4],
      watch: true
    })
  );
}
function normalizeCodegenError(errorMessage, rootDirectory) {
  const [first = "", ...rest] = errorMessage.replaceAll("[FAILED]", "").replace(/\s{2,}/g, "\n").replace(/\n,\n/, "\n").trim().split("\n");
  const message = "[Codegen] " + first;
  let details = rest.join("\n");
  if (rootDirectory) {
    const forwardSlashRootDir = rootDirectory.replaceAll("\\", "/") + "/";
    details = details.replaceAll(forwardSlashRootDir, "");
  }
  return { message, details };
}
function spawnCodegenProcess({
  rootDirectory,
  appDirectory,
  configFilePath
}) {
  const child = spawn(
    "node",
    [
      fileURLToPath(import.meta.url),
      rootDirectory,
      appDirectory,
      configFilePath ?? ""
    ],
    { stdio: ["inherit", "ignore", "pipe"] }
  );
  child.stderr.on("data", (data) => {
    const dataString = typeof data === "string" ? data : data?.toString?.("utf8") ?? "";
    if (!dataString)
      return;
    const { message, details } = normalizeCodegenError(dataString, rootDirectory);
    console.log("");
    renderWarning({ headline: message, body: details });
  });
  child.on("close", (code) => {
    if (code && code > 0) {
      renderFatalError({
        type: 0,
        name: "CodegenError",
        message: `Codegen process exited with code ${code}`,
        tryMessage: "Try restarting the dev server."
      });
      process.exit(code);
    }
  });
  return child;
}
async function generateTypes({
  configFilePath,
  watch,
  ...dirs
}) {
  const { config: codegenConfig } = await loadCodegenConfig({
    configFilePath,
    searchPlaces: [dirs.rootDirectory]
  }) || generateDefaultConfig(dirs);
  await addHooksToHydrogenOptions(codegenConfig, dirs);
  await generate(
    {
      ...codegenConfig,
      cwd: dirs.rootDirectory,
      watch,
      silent: !watch
    },
    true
  );
  return Object.keys(codegenConfig.generates);
}
function generateDefaultConfig({
  rootDirectory,
  appDirectory
}) {
  const tsDefaultGlob = "*!(*.d).{ts,tsx}";
  const appDirRelative = relativePath(rootDirectory, appDirectory);
  return {
    filepath: "virtual:codegen",
    config: {
      overwrite: true,
      pluckConfig,
      generates: {
        ["storefrontapi.generated.d.ts"]: {
          preset,
          schema,
          documents: [
            tsDefaultGlob,
            joinPath(appDirRelative, "**", tsDefaultGlob)
          ]
        }
      }
    }
  };
}
async function addHooksToHydrogenOptions(codegenConfig, { rootDirectory }) {
  const [, options] = Object.entries(codegenConfig.generates).find(
    ([, value]) => (Array.isArray(value) ? value[0] : value)?.schema === schema
  ) || [];
  const hydrogenOptions = Array.isArray(options) ? options[0] : options;
  if (hydrogenOptions) {
    const formatConfig = await resolveFormatConfig(rootDirectory);
    hydrogenOptions.hooks = {
      beforeOneFileWrite: (file, content) => format(content, formatConfig, file),
      ...hydrogenOptions.hooks
    };
  }
}

export { generateTypes, normalizeCodegenError, spawnCodegenProcess };
