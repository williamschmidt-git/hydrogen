import { resolvePath, dirname } from '@shopify/cli-kit/node/path';
import { fileExists, readFile, mkdir, writeFile } from '@shopify/cli-kit/node/fs';
import { AbortError } from '@shopify/cli-kit/node/error';
import { outputInfo } from '@shopify/cli-kit/node/output';

const SHOPIFY_DIR = ".shopify";
const SHOPIFY_DIR_PROJECT = "project.json";
async function getConfig(root) {
  const filePath = resolvePath(root, SHOPIFY_DIR, SHOPIFY_DIR_PROJECT);
  if (!await fileExists(filePath)) {
    return {};
  }
  return JSON.parse(await readFile(filePath));
}
async function setShop(root, shop) {
  const filePath = resolvePath(root, SHOPIFY_DIR, SHOPIFY_DIR_PROJECT);
  if (!await fileExists(filePath)) {
    await mkdir(dirname(filePath));
    const newConfig = {
      shop
    };
    await writeFile(filePath, JSON.stringify(newConfig));
    await ensureShopifyGitIgnore(root);
    return newConfig;
  }
  const existingConfig = JSON.parse(await readFile(filePath));
  const config = {
    ...existingConfig,
    shop
  };
  await writeFile(filePath, JSON.stringify(config));
  await ensureShopifyGitIgnore(root);
  return config;
}
async function setStorefront(root, storefront) {
  try {
    const filePath = resolvePath(root, SHOPIFY_DIR, SHOPIFY_DIR_PROJECT);
    const existingConfig = JSON.parse(await readFile(filePath));
    const config = {
      ...existingConfig,
      storefront
    };
    await writeFile(filePath, JSON.stringify(config));
    await ensureShopifyGitIgnore(root);
    return config;
  } catch {
    throw new AbortError("Project configuration could not be found.");
  }
}
async function unsetStorefront(root) {
  try {
    const filePath = resolvePath(root, SHOPIFY_DIR, SHOPIFY_DIR_PROJECT);
    const existingConfig = JSON.parse(await readFile(filePath));
    const config = {
      ...existingConfig,
      storefront: void 0
    };
    await writeFile(filePath, JSON.stringify(config));
    await ensureShopifyGitIgnore(root);
    return config;
  } catch {
    throw new AbortError("Project configuration could not be found.");
  }
}
async function ensureShopifyGitIgnore(root) {
  try {
    const gitIgnoreFilePath = resolvePath(root, ".gitignore");
    let gitIgnoreContents = await fileExists(gitIgnoreFilePath) ? await readFile(gitIgnoreFilePath) : "";
    if (gitIgnoreContents.includes(".shopify")) {
      return false;
    }
    if (gitIgnoreContents.length > 0) {
      gitIgnoreContents += `
`;
    }
    gitIgnoreContents += `${SHOPIFY_DIR}\r
`;
    outputInfo("Adding .shopify to .gitignore...");
    await writeFile(gitIgnoreFilePath, gitIgnoreContents);
    return true;
  } catch {
    return false;
  }
}

export { SHOPIFY_DIR, SHOPIFY_DIR_PROJECT, ensureShopifyGitIgnore, getConfig, setShop, setStorefront, unsetStorefront };
