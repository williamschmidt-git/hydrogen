import { outputInfo, outputContent, outputToken } from '@shopify/cli-kit/node/output';
import { resolvePath } from '@shopify/cli-kit/node/path';
import { fileExists } from '@shopify/cli-kit/node/fs';
import { colors } from './colors.js';

async function startMiniOxygen({
  root,
  port = 3e3,
  watch = false,
  buildPathWorkerFile,
  buildPathClient,
  environmentVariables = {}
}) {
  const { default: miniOxygen } = await import('@shopify/mini-oxygen');
  const miniOxygenPreview = miniOxygen.default ?? miniOxygen;
  const dotenvPath = resolvePath(root, ".env");
  const { port: actualPort } = await miniOxygenPreview({
    workerFile: buildPathWorkerFile,
    assetsDir: buildPathClient,
    publicPath: "",
    port,
    watch,
    autoReload: watch,
    modules: true,
    env: {
      ...environmentVariables,
      ...process.env
    },
    envPath: !Object.keys(environmentVariables).length && await fileExists(dotenvPath) ? dotenvPath : void 0,
    log: () => {
    },
    buildWatchPaths: watch ? [resolvePath(root, buildPathWorkerFile)] : void 0,
    onResponse: (request, response) => logResponse(
      request,
      response
    )
  });
  const listeningAt = `http://localhost:${actualPort}`;
  outputInfo(
    outputContent`ðŸš¥ MiniOxygen server started at ${outputToken.link(
      listeningAt,
      listeningAt
    )}\n`
  );
}
function logResponse(request, response) {
  try {
    const url = new URL(request.url);
    if (["/graphiql"].includes(url.pathname))
      return;
    const isProxy = !!response.url && response.url !== request.url;
    const isDataRequest = !isProxy && url.searchParams.has("_data");
    let route = request.url.replace(url.origin, "");
    let info = "";
    let type = "render";
    if (isProxy) {
      type = "proxy";
      info = `[${response.url}]`;
    }
    if (isDataRequest) {
      type = request.method === "GET" ? "loader" : "action";
      const dataParam = url.searchParams.get("_data")?.replace("routes/", "");
      route = url.pathname;
      info = `[${dataParam}]`;
    }
    const colorizeStatus = response.status < 300 ? outputToken.green : response.status < 400 ? outputToken.cyan : outputToken.errorText;
    outputInfo(
      outputContent`${request.method.padStart(6)}  ${colorizeStatus(
        String(response.status)
      )}  ${outputToken.italic(type.padEnd(7, " "))} ${route}${info ? " " + colors.dim(info) : ""} ${request.headers.get("purpose") === "prefetch" ? outputToken.italic("(prefetch)") : ""}`
    );
  } catch {
    if (request && response) {
      outputInfo(`${request.method} ${response.status} ${request.url}`);
    }
  }
}

export { logResponse, startMiniOxygen };
