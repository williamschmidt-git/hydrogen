import os from 'os';
import path from 'path';
import { execSync } from 'child_process';
import { fileExists } from '@shopify/cli-kit/node/fs';
import { outputDebug } from '@shopify/cli-kit/node/output';

const isWindows = () => process.platform === "win32";
const isGitBash = () => !!process.env.MINGW_PREFIX;
function resolveFromHome(filepath) {
  if (filepath[0] === "~") {
    return path.join(os.homedir(), filepath.slice(1));
  }
  return filepath;
}
function homeFileExists(filepath) {
  try {
    return fileExists(resolveFromHome(filepath));
  } catch (error) {
    return false;
  }
}
function supportsShell(shell) {
  try {
    execSync(`which ${shell}`, { stdio: "ignore" });
    return true;
  } catch {
    return false;
  }
}
function hasAlias(aliasName, filepath) {
  try {
    const result = execSync(
      `grep 'alias ${aliasName}' ${resolveFromHome(filepath)}`,
      { stdio: "pipe" }
    ).toString();
    return !!result;
  } catch {
    return false;
  }
}
function shellWriteFile(filepath, content, append = false) {
  content = `"${content}"`;
  content = content.replaceAll("\n", "\\n");
  if (!isWindows()) {
    content = content.replaceAll("$", "\\$");
  }
  try {
    execSync(
      `printf ${content} ${append ? ">>" : ">"} ${resolveFromHome(filepath)}`
    );
    return true;
  } catch (error) {
    outputDebug(
      `Could not create or modify ${filepath}:
` + error.stack
    );
    return false;
  }
}
function shellRunScript(script, shellBin) {
  try {
    execSync(script, { shell: shellBin, stdio: "ignore" });
    return true;
  } catch (error) {
    outputDebug(
      `Could not run shell script for ${shellBin}:
` + error.stack
    );
    return false;
  }
}

export { hasAlias, homeFileExists, isGitBash, isWindows, shellRunScript, shellWriteFile, supportsShell };
