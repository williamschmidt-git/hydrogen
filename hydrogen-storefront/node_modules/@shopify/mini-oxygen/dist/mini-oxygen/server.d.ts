/// <reference types="node" />
import http from 'http';
import { Request, Response } from '@miniflare/core';
import type { MiniOxygen } from './core';
export interface MiniOxygenServerHooks {
    onRequest?: (request: Request) => void | Promise<void>;
    onResponse?: (request: Request, response: Response) => void | Promise<void>;
    onResponseError?: (request: Request, error: unknown) => void;
}
declare const OXYGEN_HEADERS_MAP: {
    readonly ip: {
        readonly name: "oxygen-buyer-ip";
        readonly defaultValue: "127.0.0.1";
    };
    readonly longitude: {
        readonly name: "oxygen-buyer-longitude";
        readonly defaultValue: "-122.40140";
    };
    readonly latitude: {
        readonly name: "oxygen-buyer-latitude";
        readonly defaultValue: "37.78855";
    };
    readonly continent: {
        readonly name: "oxygen-buyer-continent";
        readonly defaultValue: "NA";
    };
    readonly country: {
        readonly name: "oxygen-buyer-country";
        readonly defaultValue: "US";
    };
    readonly region: {
        readonly name: "oxygen-buyer-region";
        readonly defaultValue: "California";
    };
    readonly regionCode: {
        readonly name: "oxygen-buyer-region-code";
        readonly defaultValue: "CA";
    };
    readonly city: {
        readonly name: "oxygen-buyer-city";
        readonly defaultValue: "San Francisco";
    };
    readonly isEuCountry: {
        readonly name: "oxygen-buyer-is-eu-country";
        readonly defaultValue: "";
    };
    readonly timezone: {
        readonly name: "oxygen-buyer-timezone";
        readonly defaultValue: "America/Los_Angeles";
    };
    readonly deploymentId: {
        readonly name: "oxygen-buyer-deployment-id";
        readonly defaultValue: "local";
    };
    readonly shopId: {
        readonly name: "oxygen-buyer-shop-id";
        readonly defaultValue: "development";
    };
    readonly storefrontId: {
        readonly name: "oxygen-buyer-storefront-id";
        readonly defaultValue: "development";
    };
};
declare type OxygenHeaderParams = keyof typeof OXYGEN_HEADERS_MAP;
export interface MiniOxygenServerOptions extends MiniOxygenServerHooks {
    assetsDir?: string;
    autoReload?: boolean;
    publicPath?: string;
    proxyServer?: string;
    oxygenHeaders?: Partial<{
        [key in OxygenHeaderParams]: string;
    }>;
}
export declare function createServer(mf: MiniOxygen, { assetsDir, publicPath, autoReload, proxyServer, ...rest }: MiniOxygenServerOptions): http.Server;
export {};
